{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Umesh Gupta\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, formValues, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }\n      }, error));\n    }\n  }\n  /* renderInput(formProps) {\r\n      //return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\r\n      //alternate way of writing above code\r\n      return <input {...formProps.input} />\r\n  } */\n  //above method can be finally destructured like below\n\n\n  onSubmit(formValues) {\n    console.log(formValues); //No need to call preventDefault as Redux handleSubmit takes care of it internally\n    //event.preventDefault();\n  }\n\n  render() {\n    //console.log(this.props);\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.';\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect()(formWrapped);","map":{"version":3,"sources":["C:/Users/Umesh Gupta/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","formValues","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","console","log","render","props","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Field, formValues, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { createStream } from '../../actions';\r\n\r\nclass StreamCreate extends React.Component {\r\n    renderError({ error, touched }) {\r\n        if (touched && error) {\r\n            return (\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    /* renderInput(formProps) {\r\n        //return <input onChange={formProps.input.onChange} value={formProps.input.value} />;\r\n        //alternate way of writing above code\r\n        return <input {...formProps.input} />\r\n    } */\r\n    //above method can be finally destructured like below\r\n    renderInput = ({ input, label, meta }) => {\r\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n        return (\r\n            <div className={className}>\r\n                <label>{label}</label>\r\n                <input {...input} autoComplete=\"off\" />\r\n                {this.renderError(meta)}\r\n            </div>\r\n        );\r\n    }\r\n    onSubmit(formValues) {\r\n        console.log(formValues);\r\n        //No need to call preventDefault as Redux handleSubmit takes care of it internally\r\n        //event.preventDefault();\r\n    }\r\n    render() {\r\n        //console.log(this.props);\r\n        return (\r\n            <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n                <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.title) {\r\n        errors.title = 'You must enter a title.';\r\n    }\r\n    if (!formValues.description) {\r\n        errors.description = 'You must enter a description.';\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst formWrapped = reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate);\r\n\r\nexport default connect()(formWrapped);"]},"metadata":{},"sourceType":"module"}