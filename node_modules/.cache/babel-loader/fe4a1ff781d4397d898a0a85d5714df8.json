{"ast":null,"code":"import { formValues } from 'redux-form';\nimport streams from '../apis/streams';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); // Do some programmatic navigation to get the user back to root route\n  // after successful stream creation\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["C:/Users/Umesh Gupta/streams/client/src/actions/index.js"],"names":["formValues","streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","dispatch","getState","auth","response","post","data","fetchStreams","get","fetchStream","id","deleteStream","delete","editStream","put"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SACIC,OADJ,EAEIC,QAFJ,EAGIC,aAHJ,EAIIC,aAJJ,EAKIC,YALJ,EAMIC,aANJ,EAOIC,WAPJ,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAET,OADH;AAEHU,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMW,YAAY,GAAGd,UAAU,IAAI,OAAOe,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,QAAM;AAAEN,IAAAA;AAAF,MAAaM,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMjB,OAAO,CAACkB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGnB,UAAL;AAAiBU,IAAAA;AAAjB,GAAzB,CAAvB;AACAK,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAzC,GAAD,CAAR,CAHoE,CAIpE;AACA;AAEH,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMN,QAAN,IAAkB;AAChD,QAAMG,QAAQ,GAAG,MAAMjB,OAAO,CAACqB,GAAR,CAAY,UAAZ,CAAvB;AACAP,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAAQ,MAAMT,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMjB,OAAO,CAACqB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AACAT,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMK,YAAY,GAAID,EAAD,IAAQ,MAAMT,QAAN,IAAkB;AAClD,QAAMd,OAAO,CAACyB,MAAR,CAAgB,YAAWF,EAAG,EAA9B,CAAN;AACAT,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEY;AAAhC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMG,UAAU,GAAG,CAACH,EAAD,EAAKxB,UAAL,KAAoB,MAAMe,QAAN,IAAkB;AAC5D,QAAMG,QAAQ,GAAG,MAAMjB,OAAO,CAAC2B,GAAR,CAAa,YAAWJ,EAAG,EAA3B,EAA8BxB,UAA9B,CAAvB;AACAe,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEM,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACH,CAHM","sourcesContent":["import { formValues } from 'redux-form';\r\nimport streams from '../apis/streams';\r\nimport { \r\n    SIGN_IN, \r\n    SIGN_OUT, \r\n    CREATE_STREAM, \r\n    FETCH_STREAMS, \r\n    FETCH_STREAM, \r\n    DELETE_STREAM, \r\n    EDIT_STREAM \r\n} from './types';\r\n\r\nexport const signIn = (userId) => {\r\n    return {\r\n        type: SIGN_IN,\r\n        payload: userId\r\n    };\r\n};\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: SIGN_OUT\r\n    };\r\n};\r\n\r\nexport const createStream = formValues => async (dispatch, getState) => {\r\n    const { userId } = getState().auth;\r\n    const response = await streams.post('/streams', { ...formValues, userId });\r\n    dispatch({ type: CREATE_STREAM, payload: response.data });\r\n    // Do some programmatic navigation to get the user back to root route\r\n    // after successful stream creation\r\n    \r\n};\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n    const response = await streams.get('/streams');\r\n    dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = (id) => async dispatch => {\r\n    const response = await streams.get(`/streams/${id}`);\r\n    dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const deleteStream = (id) => async dispatch => {\r\n    await streams.delete(`/streams/${id}`);\r\n    dispatch({ type: DELETE_STREAM, payload: id });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n    const response = await streams.put(`/streams/${id}`, formValues);\r\n    dispatch({ type: EDIT_STREAM, payload: response.data });\r\n};"]},"metadata":{},"sourceType":"module"}